module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<f16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i32, dense<32> : vector<2xi64>>, #dlti.dl_entry<i16, dense<16> : vector<2xi64>>, #dlti.dl_entry<i8, dense<8> : vector<2xi64>>, #dlti.dl_entry<i1, dense<8> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr, dense<64> : vector<4xi64>>, #dlti.dl_entry<f80, dense<128> : vector<2xi64>>, #dlti.dl_entry<i64, dense<64> : vector<2xi64>>, #dlti.dl_entry<!llvm.ptr<272>, dense<64> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<271>, dense<32> : vector<4xi64>>, #dlti.dl_entry<!llvm.ptr<270>, dense<32> : vector<4xi64>>, #dlti.dl_entry<f128, dense<128> : vector<2xi64>>, #dlti.dl_entry<f64, dense<64> : vector<2xi64>>, #dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<"dlti.stack_alignment", 128 : i64>>} {
  llvm.mlir.global private unnamed_addr constant @".str"("Executing Task A\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.1"("Executing Task B\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.2"("Executing Task C\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.3"("Executing Task D\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.4"("A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.5"("B\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.6"("C\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.7"("D\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.8"("Number of tasks: %d\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.9"("Is taskflow empty? %s\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.10"("yes\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.11"("no\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.12"("\0AExecuting taskflow...\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.13"("-------------------\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.mlir.global private unnamed_addr constant @".str.14"("Execution complete!\0A\00") {addr_space = 0 : i32, alignment = 1 : i64, dso_local} loc(#loc)
  llvm.func @_Z5taskAv() attributes {frame_pointer = #llvm.framePointerKind<all>, no_inline, optimize_none, passthrough = ["mustprogress", ["uwtable", "2"], ["min-legal-vector-width", "0"], ["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} {
    %0 = llvm.mlir.constant("Executing Task A\0A\00") : !llvm.array<18 x i8> loc(#loc1)
    %1 = llvm.mlir.addressof @".str" : !llvm.ptr loc(#loc1)
    %2 = llvm.call @printf(%1) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    llvm.return loc(#loc1)
  } loc(#loc1)
  llvm.func @printf(!llvm.ptr {llvm.noundef}, ...) -> i32 attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
  llvm.func @_Z5taskBv() attributes {frame_pointer = #llvm.framePointerKind<all>, no_inline, optimize_none, passthrough = ["mustprogress", ["uwtable", "2"], ["min-legal-vector-width", "0"], ["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} {
    %0 = llvm.mlir.constant("Executing Task B\0A\00") : !llvm.array<18 x i8> loc(#loc1)
    %1 = llvm.mlir.addressof @".str.1" : !llvm.ptr loc(#loc1)
    %2 = llvm.call @printf(%1) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    llvm.return loc(#loc1)
  } loc(#loc1)
  llvm.func @_Z5taskCv() attributes {frame_pointer = #llvm.framePointerKind<all>, no_inline, optimize_none, passthrough = ["mustprogress", ["uwtable", "2"], ["min-legal-vector-width", "0"], ["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} {
    %0 = llvm.mlir.constant("Executing Task C\0A\00") : !llvm.array<18 x i8> loc(#loc1)
    %1 = llvm.mlir.addressof @".str.2" : !llvm.ptr loc(#loc1)
    %2 = llvm.call @printf(%1) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    llvm.return loc(#loc1)
  } loc(#loc1)
  llvm.func @_Z5taskDv() attributes {frame_pointer = #llvm.framePointerKind<all>, no_inline, optimize_none, passthrough = ["mustprogress", ["uwtable", "2"], ["min-legal-vector-width", "0"], ["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} {
    %0 = llvm.mlir.constant("Executing Task D\0A\00") : !llvm.array<18 x i8> loc(#loc1)
    %1 = llvm.mlir.addressof @".str.3" : !llvm.ptr loc(#loc1)
    %2 = llvm.call @printf(%1) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    llvm.return loc(#loc1)
  } loc(#loc1)
  llvm.func @main() -> (i32 {llvm.noundef}) attributes {frame_pointer = #llvm.framePointerKind<all>, no_inline, optimize_none, passthrough = ["mustprogress", "norecurse", ["uwtable", "2"], ["min-legal-vector-width", "0"], ["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} {
    %0 = llvm.mlir.constant(1 : i32) : i32 loc(#loc1)
    %1 = llvm.mlir.constant(0 : i32) : i32 loc(#loc1)
    %2 = llvm.mlir.constant("A\00") : !llvm.array<2 x i8> loc(#loc1)
    %3 = llvm.mlir.addressof @".str.4" : !llvm.ptr loc(#loc1)
    %4 = llvm.mlir.addressof @_Z5taskAv : !llvm.ptr loc(#loc1)
    %5 = llvm.mlir.constant("B\00") : !llvm.array<2 x i8> loc(#loc1)
    %6 = llvm.mlir.addressof @".str.5" : !llvm.ptr loc(#loc1)
    %7 = llvm.mlir.addressof @_Z5taskBv : !llvm.ptr loc(#loc1)
    %8 = llvm.mlir.constant("C\00") : !llvm.array<2 x i8> loc(#loc1)
    %9 = llvm.mlir.addressof @".str.6" : !llvm.ptr loc(#loc1)
    %10 = llvm.mlir.addressof @_Z5taskCv : !llvm.ptr loc(#loc1)
    %11 = llvm.mlir.constant("D\00") : !llvm.array<2 x i8> loc(#loc1)
    %12 = llvm.mlir.addressof @".str.7" : !llvm.ptr loc(#loc1)
    %13 = llvm.mlir.addressof @_Z5taskDv : !llvm.ptr loc(#loc1)
    %14 = llvm.mlir.constant("Number of tasks: %d\0A\00") : !llvm.array<21 x i8> loc(#loc1)
    %15 = llvm.mlir.addressof @".str.8" : !llvm.ptr loc(#loc1)
    %16 = llvm.mlir.constant("yes\00") : !llvm.array<4 x i8> loc(#loc1)
    %17 = llvm.mlir.addressof @".str.10" : !llvm.ptr loc(#loc1)
    %18 = llvm.mlir.constant("no\00") : !llvm.array<3 x i8> loc(#loc1)
    %19 = llvm.mlir.addressof @".str.11" : !llvm.ptr loc(#loc1)
    %20 = llvm.mlir.constant("Is taskflow empty? %s\0A\00") : !llvm.array<23 x i8> loc(#loc1)
    %21 = llvm.mlir.addressof @".str.9" : !llvm.ptr loc(#loc1)
    %22 = llvm.mlir.constant("\0AExecuting taskflow...\0A\00") : !llvm.array<24 x i8> loc(#loc1)
    %23 = llvm.mlir.addressof @".str.12" : !llvm.ptr loc(#loc1)
    %24 = llvm.mlir.constant("-------------------\0A\00") : !llvm.array<21 x i8> loc(#loc1)
    %25 = llvm.mlir.addressof @".str.13" : !llvm.ptr loc(#loc1)
    %26 = llvm.mlir.constant("Execution complete!\0A\00") : !llvm.array<21 x i8> loc(#loc1)
    %27 = llvm.mlir.addressof @".str.14" : !llvm.ptr loc(#loc1)
    %28 = llvm.alloca %0 x i32 {alignment = 4 : i64} : (i32) -> !llvm.ptr loc(#loc1)
    %29 = llvm.alloca %0 x !llvm.ptr {alignment = 8 : i64} : (i32) -> !llvm.ptr loc(#loc1)
    %30 = llvm.alloca %0 x !llvm.ptr {alignment = 8 : i64} : (i32) -> !llvm.ptr loc(#loc1)
    %31 = llvm.alloca %0 x !llvm.ptr {alignment = 8 : i64} : (i32) -> !llvm.ptr loc(#loc1)
    %32 = llvm.alloca %0 x !llvm.ptr {alignment = 8 : i64} : (i32) -> !llvm.ptr loc(#loc1)
    %33 = llvm.alloca %0 x !llvm.ptr {alignment = 8 : i64} : (i32) -> !llvm.ptr loc(#loc1)
    llvm.store %1, %28 {alignment = 4 : i64} : i32, !llvm.ptr loc(#loc1)
    %34 = llvm.call @taskflow_create() : () -> !llvm.ptr loc(#loc1)
    llvm.store %34, %29 {alignment = 8 : i64} : !llvm.ptr, !llvm.ptr loc(#loc1)
    %35 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %36 = llvm.call @taskflow_create_task(%35, %3, %4) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr loc(#loc1)
    llvm.store %36, %30 {alignment = 8 : i64} : !llvm.ptr, !llvm.ptr loc(#loc1)
    %37 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %38 = llvm.call @taskflow_create_task(%37, %6, %7) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr loc(#loc1)
    llvm.store %38, %31 {alignment = 8 : i64} : !llvm.ptr, !llvm.ptr loc(#loc1)
    %39 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %40 = llvm.call @taskflow_create_task(%39, %9, %10) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr loc(#loc1)
    llvm.store %40, %32 {alignment = 8 : i64} : !llvm.ptr, !llvm.ptr loc(#loc1)
    %41 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %42 = llvm.call @taskflow_create_task(%41, %12, %13) : (!llvm.ptr, !llvm.ptr, !llvm.ptr) -> !llvm.ptr loc(#loc1)
    llvm.store %42, %33 {alignment = 8 : i64} : !llvm.ptr, !llvm.ptr loc(#loc1)
    %43 = llvm.load %30 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %44 = llvm.load %31 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    llvm.call @taskflow_add_dependency(%43, %44) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1)
    %45 = llvm.load %30 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %46 = llvm.load %32 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    llvm.call @taskflow_add_dependency(%45, %46) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1)
    %47 = llvm.load %31 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %48 = llvm.load %33 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    llvm.call @taskflow_add_dependency(%47, %48) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1)
    %49 = llvm.load %32 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %50 = llvm.load %33 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    llvm.call @taskflow_add_dependency(%49, %50) : (!llvm.ptr, !llvm.ptr) -> () loc(#loc1)
    %51 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %52 = llvm.call @taskflow_num_tasks(%51) : (!llvm.ptr) -> i32 loc(#loc1)
    %53 = llvm.call @printf(%15, %52) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, i32) -> i32 loc(#loc1)
    %54 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    %55 = llvm.call @taskflow_is_empty(%54) : (!llvm.ptr) -> i32 loc(#loc1)
    %56 = llvm.icmp "ne" %55, %1 : i32 loc(#loc1)
    %57 = llvm.zext %56 : i1 to i64 loc(#loc1)
    %58 = llvm.select %56, %17, %19 : i1, !llvm.ptr loc(#loc1)
    %59 = llvm.call @printf(%21, %58) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr, !llvm.ptr) -> i32 loc(#loc1)
    %60 = llvm.call @printf(%23) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    %61 = llvm.call @printf(%25) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    %62 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    llvm.call @taskflow_execute(%62) : (!llvm.ptr) -> () loc(#loc1)
    %63 = llvm.call @printf(%25) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    %64 = llvm.call @printf(%27) vararg(!llvm.func<i32 (ptr, ...)>) : (!llvm.ptr) -> i32 loc(#loc1)
    %65 = llvm.load %29 {alignment = 8 : i64} : !llvm.ptr -> !llvm.ptr loc(#loc1)
    llvm.call @taskflow_destroy(%65) : (!llvm.ptr) -> () loc(#loc1)
    llvm.return %1 : i32 loc(#loc1)
  } loc(#loc1)
  llvm.func @taskflow_create() -> !llvm.ptr attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
  llvm.func @taskflow_create_task(!llvm.ptr {llvm.noundef}, !llvm.ptr {llvm.noundef}, !llvm.ptr {llvm.noundef}) -> !llvm.ptr attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
  llvm.func @taskflow_add_dependency(!llvm.ptr {llvm.noundef}, !llvm.ptr {llvm.noundef}) attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
  llvm.func @taskflow_num_tasks(!llvm.ptr {llvm.noundef}) -> i32 attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
  llvm.func @taskflow_is_empty(!llvm.ptr {llvm.noundef}) -> i32 attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
  llvm.func @taskflow_execute(!llvm.ptr {llvm.noundef}) attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
  llvm.func @taskflow_destroy(!llvm.ptr {llvm.noundef}) attributes {frame_pointer = #llvm.framePointerKind<all>, passthrough = [["no-trapping-math", "true"], ["stack-protector-buffer-size", "8"], ["target-cpu", "x86-64"]], target_cpu = "x86-64", target_features = #llvm.target_features<["+cmov", "+cx8", "+fxsr", "+mmx", "+sse", "+sse2", "+x87"]>, tune_cpu = "generic"} loc(#loc1)
} loc(#loc)
#loc = loc("/heorot/lchang21/taskflow/taskflow/taskflow-lib/test.cpp":0:0)
#loc1 = loc(unknown)
